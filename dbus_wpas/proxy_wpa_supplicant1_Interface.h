/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef _DBUS_GLIB_ASYNC_DATA_FREE
#define _DBUS_GLIB_ASYNC_DATA_FREE
static
#ifdef G_HAVE_INLINE
inline
#endif
void
_dbus_glib_async_data_free (gpointer stuff)
{
	g_slice_free (DBusGAsyncData, stuff);
}
#endif

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_DBus_Introspectable
#define DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_DBus_Introspectable

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_DBus_Introspectable_introspect (DBusGProxy *proxy, char ** OUT_data, GError **error)

{
  return dbus_g_proxy_call (proxy, "Introspect", error, G_TYPE_INVALID, G_TYPE_STRING, OUT_data, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_DBus_Introspectable_introspect_reply) (DBusGProxy *proxy, char * OUT_data, GError *error, gpointer userdata);

static void
org_freedesktop_DBus_Introspectable_introspect_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_data;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_data, G_TYPE_INVALID);
  (*(org_freedesktop_DBus_Introspectable_introspect_reply)data->cb) (proxy, OUT_data, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_DBus_Introspectable_introspect_async (DBusGProxy *proxy, org_freedesktop_DBus_Introspectable_introspect_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Introspect", org_freedesktop_DBus_Introspectable_introspect_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_DBus_Introspectable */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_DBus_Properties
#define DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_DBus_Properties

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_DBus_Properties_get (DBusGProxy *proxy, const char * IN_interface, const char * IN_propname, GValue* OUT_value, GError **error)

{
  return dbus_g_proxy_call (proxy, "Get", error, G_TYPE_STRING, IN_interface, G_TYPE_STRING, IN_propname, G_TYPE_INVALID, G_TYPE_VALUE, OUT_value, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_DBus_Properties_get_reply) (DBusGProxy *proxy, GValue OUT_value, GError *error, gpointer userdata);

static void
org_freedesktop_DBus_Properties_get_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GValue OUT_value = { 0, };
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_VALUE, &OUT_value, G_TYPE_INVALID);
  (*(org_freedesktop_DBus_Properties_get_reply)data->cb) (proxy, OUT_value, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_DBus_Properties_get_async (DBusGProxy *proxy, const char * IN_interface, const char * IN_propname, org_freedesktop_DBus_Properties_get_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Get", org_freedesktop_DBus_Properties_get_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_interface, G_TYPE_STRING, IN_propname, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_DBus_Properties_get_all (DBusGProxy *proxy, const char * IN_interface, GHashTable** OUT_props, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetAll", error, G_TYPE_STRING, IN_interface, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), OUT_props, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_DBus_Properties_get_all_reply) (DBusGProxy *proxy, GHashTable *OUT_props, GError *error, gpointer userdata);

static void
org_freedesktop_DBus_Properties_get_all_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_props;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), &OUT_props, G_TYPE_INVALID);
  (*(org_freedesktop_DBus_Properties_get_all_reply)data->cb) (proxy, OUT_props, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_DBus_Properties_get_all_async (DBusGProxy *proxy, const char * IN_interface, org_freedesktop_DBus_Properties_get_all_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetAll", org_freedesktop_DBus_Properties_get_all_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_interface, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_freedesktop_DBus_Properties_set (DBusGProxy *proxy, const char * IN_interface, const char * IN_propname, const GValue* IN_value, GError **error)

{
  return dbus_g_proxy_call (proxy, "Set", error, G_TYPE_STRING, IN_interface, G_TYPE_STRING, IN_propname, G_TYPE_VALUE, IN_value, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_freedesktop_DBus_Properties_set_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_freedesktop_DBus_Properties_set_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_freedesktop_DBus_Properties_set_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_freedesktop_DBus_Properties_set_async (DBusGProxy *proxy, const char * IN_interface, const char * IN_propname, const GValue* IN_value, org_freedesktop_DBus_Properties_set_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Set", org_freedesktop_DBus_Properties_set_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_interface, G_TYPE_STRING, IN_propname, G_TYPE_VALUE, IN_value, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_freedesktop_DBus_Properties */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_fi_w1_wpa_supplicant1_Interface
#define DBUS_GLIB_CLIENT_WRAPPERS_fi_w1_wpa_supplicant1_Interface

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_scan (DBusGProxy *proxy, const GHashTable* IN_args, GError **error)

{
  return dbus_g_proxy_call (proxy, "Scan", error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_scan_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_scan_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_scan_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_scan_async (DBusGProxy *proxy, const GHashTable* IN_args, fi_w1_wpa_supplicant1_Interface_scan_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Scan", fi_w1_wpa_supplicant1_Interface_scan_async_callback, stuff, _dbus_glib_async_data_free, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_signal_poll (DBusGProxy *proxy, GHashTable** OUT_args, GError **error)

{
  return dbus_g_proxy_call (proxy, "SignalPoll", error, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), OUT_args, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_signal_poll_reply) (DBusGProxy *proxy, GHashTable *OUT_args, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_signal_poll_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_args;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), &OUT_args, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_signal_poll_reply)data->cb) (proxy, OUT_args, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_signal_poll_async (DBusGProxy *proxy, fi_w1_wpa_supplicant1_Interface_signal_poll_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SignalPoll", fi_w1_wpa_supplicant1_Interface_signal_poll_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_disconnect (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Disconnect", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_disconnect_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_disconnect_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_disconnect_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_disconnect_async (DBusGProxy *proxy, fi_w1_wpa_supplicant1_Interface_disconnect_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Disconnect", fi_w1_wpa_supplicant1_Interface_disconnect_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_add_network (DBusGProxy *proxy, const GHashTable* IN_args, char** OUT_path, GError **error)

{
  return dbus_g_proxy_call (proxy, "AddNetwork", error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID, DBUS_TYPE_G_OBJECT_PATH, OUT_path, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_add_network_reply) (DBusGProxy *proxy, char *OUT_path, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_add_network_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char* OUT_path;
  dbus_g_proxy_end_call (proxy, call, &error, DBUS_TYPE_G_OBJECT_PATH, &OUT_path, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_add_network_reply)data->cb) (proxy, OUT_path, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_add_network_async (DBusGProxy *proxy, const GHashTable* IN_args, fi_w1_wpa_supplicant1_Interface_add_network_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "AddNetwork", fi_w1_wpa_supplicant1_Interface_add_network_async_callback, stuff, _dbus_glib_async_data_free, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_reassociate (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Reassociate", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_reassociate_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_reassociate_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_reassociate_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_reassociate_async (DBusGProxy *proxy, fi_w1_wpa_supplicant1_Interface_reassociate_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Reassociate", fi_w1_wpa_supplicant1_Interface_reassociate_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_reattach (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Reattach", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_reattach_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_reattach_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_reattach_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_reattach_async (DBusGProxy *proxy, fi_w1_wpa_supplicant1_Interface_reattach_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Reattach", fi_w1_wpa_supplicant1_Interface_reattach_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_remove_network (DBusGProxy *proxy, const char* IN_path, GError **error)

{
  return dbus_g_proxy_call (proxy, "RemoveNetwork", error, DBUS_TYPE_G_OBJECT_PATH, IN_path, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_remove_network_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_remove_network_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_remove_network_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_remove_network_async (DBusGProxy *proxy, const char* IN_path, fi_w1_wpa_supplicant1_Interface_remove_network_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "RemoveNetwork", fi_w1_wpa_supplicant1_Interface_remove_network_async_callback, stuff, _dbus_glib_async_data_free, DBUS_TYPE_G_OBJECT_PATH, IN_path, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_remove_all_networks (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "RemoveAllNetworks", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_remove_all_networks_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_remove_all_networks_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_remove_all_networks_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_remove_all_networks_async (DBusGProxy *proxy, fi_w1_wpa_supplicant1_Interface_remove_all_networks_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "RemoveAllNetworks", fi_w1_wpa_supplicant1_Interface_remove_all_networks_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_select_network (DBusGProxy *proxy, const char* IN_path, GError **error)

{
  return dbus_g_proxy_call (proxy, "SelectNetwork", error, DBUS_TYPE_G_OBJECT_PATH, IN_path, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_select_network_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_select_network_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_select_network_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_select_network_async (DBusGProxy *proxy, const char* IN_path, fi_w1_wpa_supplicant1_Interface_select_network_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SelectNetwork", fi_w1_wpa_supplicant1_Interface_select_network_async_callback, stuff, _dbus_glib_async_data_free, DBUS_TYPE_G_OBJECT_PATH, IN_path, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_network_reply (DBusGProxy *proxy, const char* IN_path, const char * IN_field, const char * IN_value, GError **error)

{
  return dbus_g_proxy_call (proxy, "NetworkReply", error, DBUS_TYPE_G_OBJECT_PATH, IN_path, G_TYPE_STRING, IN_field, G_TYPE_STRING, IN_value, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_network_reply_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_network_reply_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_network_reply_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_network_reply_async (DBusGProxy *proxy, const char* IN_path, const char * IN_field, const char * IN_value, fi_w1_wpa_supplicant1_Interface_network_reply_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "NetworkReply", fi_w1_wpa_supplicant1_Interface_network_reply_async_callback, stuff, _dbus_glib_async_data_free, DBUS_TYPE_G_OBJECT_PATH, IN_path, G_TYPE_STRING, IN_field, G_TYPE_STRING, IN_value, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_add_blob (DBusGProxy *proxy, const char * IN_name, const GArray* IN_data, GError **error)

{
  return dbus_g_proxy_call (proxy, "AddBlob", error, G_TYPE_STRING, IN_name, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), IN_data, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_add_blob_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_add_blob_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_add_blob_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_add_blob_async (DBusGProxy *proxy, const char * IN_name, const GArray* IN_data, fi_w1_wpa_supplicant1_Interface_add_blob_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "AddBlob", fi_w1_wpa_supplicant1_Interface_add_blob_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_name, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), IN_data, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_get_blob (DBusGProxy *proxy, const char * IN_name, GArray** OUT_data, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetBlob", error, G_TYPE_STRING, IN_name, G_TYPE_INVALID, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), OUT_data, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_get_blob_reply) (DBusGProxy *proxy, GArray *OUT_data, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_get_blob_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GArray* OUT_data;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), &OUT_data, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_get_blob_reply)data->cb) (proxy, OUT_data, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_get_blob_async (DBusGProxy *proxy, const char * IN_name, fi_w1_wpa_supplicant1_Interface_get_blob_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetBlob", fi_w1_wpa_supplicant1_Interface_get_blob_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_name, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_remove_blob (DBusGProxy *proxy, const char * IN_name, GError **error)

{
  return dbus_g_proxy_call (proxy, "RemoveBlob", error, G_TYPE_STRING, IN_name, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_remove_blob_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_remove_blob_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_remove_blob_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_remove_blob_async (DBusGProxy *proxy, const char * IN_name, fi_w1_wpa_supplicant1_Interface_remove_blob_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "RemoveBlob", fi_w1_wpa_supplicant1_Interface_remove_blob_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_name, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_set_pk_cs11_engine_and_module_path (DBusGProxy *proxy, const char * IN_pkcs11_engine_path, const char * IN_pkcs11_module_path, GError **error)

{
  return dbus_g_proxy_call (proxy, "SetPKCS11EngineAndModulePath", error, G_TYPE_STRING, IN_pkcs11_engine_path, G_TYPE_STRING, IN_pkcs11_module_path, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_set_pk_cs11_engine_and_module_path_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_set_pk_cs11_engine_and_module_path_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_set_pk_cs11_engine_and_module_path_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_set_pk_cs11_engine_and_module_path_async (DBusGProxy *proxy, const char * IN_pkcs11_engine_path, const char * IN_pkcs11_module_path, fi_w1_wpa_supplicant1_Interface_set_pk_cs11_engine_and_module_path_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SetPKCS11EngineAndModulePath", fi_w1_wpa_supplicant1_Interface_set_pk_cs11_engine_and_module_path_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_pkcs11_engine_path, G_TYPE_STRING, IN_pkcs11_module_path, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_flush_bs_s (DBusGProxy *proxy, const guint IN_age, GError **error)

{
  return dbus_g_proxy_call (proxy, "FlushBSS", error, G_TYPE_UINT, IN_age, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_flush_bs_s_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_flush_bs_s_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_flush_bs_s_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_flush_bs_s_async (DBusGProxy *proxy, const guint IN_age, fi_w1_wpa_supplicant1_Interface_flush_bs_s_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "FlushBSS", fi_w1_wpa_supplicant1_Interface_flush_bs_s_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_UINT, IN_age, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_subscribe_probe_req (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "SubscribeProbeReq", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_subscribe_probe_req_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_subscribe_probe_req_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_subscribe_probe_req_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_subscribe_probe_req_async (DBusGProxy *proxy, fi_w1_wpa_supplicant1_Interface_subscribe_probe_req_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "SubscribeProbeReq", fi_w1_wpa_supplicant1_Interface_subscribe_probe_req_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_unsubscribe_probe_req (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "UnsubscribeProbeReq", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_unsubscribe_probe_req_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_unsubscribe_probe_req_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_unsubscribe_probe_req_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_unsubscribe_probe_req_async (DBusGProxy *proxy, fi_w1_wpa_supplicant1_Interface_unsubscribe_probe_req_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "UnsubscribeProbeReq", fi_w1_wpa_supplicant1_Interface_unsubscribe_probe_req_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_e_ap_logoff (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "EAPLogoff", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_e_ap_logoff_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_e_ap_logoff_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_e_ap_logoff_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_e_ap_logoff_async (DBusGProxy *proxy, fi_w1_wpa_supplicant1_Interface_e_ap_logoff_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "EAPLogoff", fi_w1_wpa_supplicant1_Interface_e_ap_logoff_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_e_ap_logon (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "EAPLogon", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_e_ap_logon_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_e_ap_logon_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_e_ap_logon_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_e_ap_logon_async (DBusGProxy *proxy, fi_w1_wpa_supplicant1_Interface_e_ap_logon_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "EAPLogon", fi_w1_wpa_supplicant1_Interface_e_ap_logon_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_fi_w1_wpa_supplicant1_Interface */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_fi_w1_wpa_supplicant1_Interface_WPS
#define DBUS_GLIB_CLIENT_WRAPPERS_fi_w1_wpa_supplicant1_Interface_WPS

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_WPS_start (DBusGProxy *proxy, const GHashTable* IN_args, GHashTable** OUT_output, GError **error)

{
  return dbus_g_proxy_call (proxy, "Start", error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), OUT_output, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_WPS_start_reply) (DBusGProxy *proxy, GHashTable *OUT_output, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_WPS_start_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GHashTable* OUT_output;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), &OUT_output, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_WPS_start_reply)data->cb) (proxy, OUT_output, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_WPS_start_async (DBusGProxy *proxy, const GHashTable* IN_args, fi_w1_wpa_supplicant1_Interface_WPS_start_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Start", fi_w1_wpa_supplicant1_Interface_WPS_start_async_callback, stuff, _dbus_glib_async_data_free, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_fi_w1_wpa_supplicant1_Interface_WPS */

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_fi_w1_wpa_supplicant1_Interface_P2PDevice
#define DBUS_GLIB_CLIENT_WRAPPERS_fi_w1_wpa_supplicant1_Interface_P2PDevice

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_P2PDevice_find (DBusGProxy *proxy, const GHashTable* IN_args, GError **error)

{
  return dbus_g_proxy_call (proxy, "Find", error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_P2PDevice_find_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_P2PDevice_find_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_P2PDevice_find_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_P2PDevice_find_async (DBusGProxy *proxy, const GHashTable* IN_args, fi_w1_wpa_supplicant1_Interface_P2PDevice_find_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Find", fi_w1_wpa_supplicant1_Interface_P2PDevice_find_async_callback, stuff, _dbus_glib_async_data_free, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_P2PDevice_stop_find (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "StopFind", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_P2PDevice_stop_find_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_P2PDevice_stop_find_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_P2PDevice_stop_find_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_P2PDevice_stop_find_async (DBusGProxy *proxy, fi_w1_wpa_supplicant1_Interface_P2PDevice_stop_find_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "StopFind", fi_w1_wpa_supplicant1_Interface_P2PDevice_stop_find_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_P2PDevice_listen (DBusGProxy *proxy, const gint IN_timeout, GError **error)

{
  return dbus_g_proxy_call (proxy, "Listen", error, G_TYPE_INT, IN_timeout, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_P2PDevice_listen_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_P2PDevice_listen_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_P2PDevice_listen_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_P2PDevice_listen_async (DBusGProxy *proxy, const gint IN_timeout, fi_w1_wpa_supplicant1_Interface_P2PDevice_listen_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Listen", fi_w1_wpa_supplicant1_Interface_P2PDevice_listen_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INT, IN_timeout, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_P2PDevice_extended_listen (DBusGProxy *proxy, const GHashTable* IN_args, GError **error)

{
  return dbus_g_proxy_call (proxy, "ExtendedListen", error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_P2PDevice_extended_listen_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_P2PDevice_extended_listen_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_P2PDevice_extended_listen_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_P2PDevice_extended_listen_async (DBusGProxy *proxy, const GHashTable* IN_args, fi_w1_wpa_supplicant1_Interface_P2PDevice_extended_listen_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "ExtendedListen", fi_w1_wpa_supplicant1_Interface_P2PDevice_extended_listen_async_callback, stuff, _dbus_glib_async_data_free, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_P2PDevice_presence_request (DBusGProxy *proxy, const GHashTable* IN_args, GError **error)

{
  return dbus_g_proxy_call (proxy, "PresenceRequest", error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_P2PDevice_presence_request_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_P2PDevice_presence_request_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_P2PDevice_presence_request_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_P2PDevice_presence_request_async (DBusGProxy *proxy, const GHashTable* IN_args, fi_w1_wpa_supplicant1_Interface_P2PDevice_presence_request_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "PresenceRequest", fi_w1_wpa_supplicant1_Interface_P2PDevice_presence_request_async_callback, stuff, _dbus_glib_async_data_free, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_P2PDevice_provision_discovery_request (DBusGProxy *proxy, const char* IN_peer, const char * IN_config_method, GError **error)

{
  return dbus_g_proxy_call (proxy, "ProvisionDiscoveryRequest", error, DBUS_TYPE_G_OBJECT_PATH, IN_peer, G_TYPE_STRING, IN_config_method, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_P2PDevice_provision_discovery_request_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_P2PDevice_provision_discovery_request_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_P2PDevice_provision_discovery_request_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_P2PDevice_provision_discovery_request_async (DBusGProxy *proxy, const char* IN_peer, const char * IN_config_method, fi_w1_wpa_supplicant1_Interface_P2PDevice_provision_discovery_request_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "ProvisionDiscoveryRequest", fi_w1_wpa_supplicant1_Interface_P2PDevice_provision_discovery_request_async_callback, stuff, _dbus_glib_async_data_free, DBUS_TYPE_G_OBJECT_PATH, IN_peer, G_TYPE_STRING, IN_config_method, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_P2PDevice_connect (DBusGProxy *proxy, const GHashTable* IN_args, char ** OUT_generated_pin, GError **error)

{
  return dbus_g_proxy_call (proxy, "Connect", error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID, G_TYPE_STRING, OUT_generated_pin, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_P2PDevice_connect_reply) (DBusGProxy *proxy, char * OUT_generated_pin, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_P2PDevice_connect_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char * OUT_generated_pin;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRING, &OUT_generated_pin, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_P2PDevice_connect_reply)data->cb) (proxy, OUT_generated_pin, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_P2PDevice_connect_async (DBusGProxy *proxy, const GHashTable* IN_args, fi_w1_wpa_supplicant1_Interface_P2PDevice_connect_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Connect", fi_w1_wpa_supplicant1_Interface_P2PDevice_connect_async_callback, stuff, _dbus_glib_async_data_free, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_P2PDevice_group_add (DBusGProxy *proxy, const GHashTable* IN_args, GError **error)

{
  return dbus_g_proxy_call (proxy, "GroupAdd", error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_P2PDevice_group_add_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_P2PDevice_group_add_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_P2PDevice_group_add_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_P2PDevice_group_add_async (DBusGProxy *proxy, const GHashTable* IN_args, fi_w1_wpa_supplicant1_Interface_P2PDevice_group_add_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GroupAdd", fi_w1_wpa_supplicant1_Interface_P2PDevice_group_add_async_callback, stuff, _dbus_glib_async_data_free, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_P2PDevice_invite (DBusGProxy *proxy, const GHashTable* IN_args, GError **error)

{
  return dbus_g_proxy_call (proxy, "Invite", error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_P2PDevice_invite_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_P2PDevice_invite_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_P2PDevice_invite_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_P2PDevice_invite_async (DBusGProxy *proxy, const GHashTable* IN_args, fi_w1_wpa_supplicant1_Interface_P2PDevice_invite_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Invite", fi_w1_wpa_supplicant1_Interface_P2PDevice_invite_async_callback, stuff, _dbus_glib_async_data_free, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_P2PDevice_disconnect (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Disconnect", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_P2PDevice_disconnect_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_P2PDevice_disconnect_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_P2PDevice_disconnect_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_P2PDevice_disconnect_async (DBusGProxy *proxy, fi_w1_wpa_supplicant1_Interface_P2PDevice_disconnect_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Disconnect", fi_w1_wpa_supplicant1_Interface_P2PDevice_disconnect_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_P2PDevice_reject_peer (DBusGProxy *proxy, const char* IN_peer, GError **error)

{
  return dbus_g_proxy_call (proxy, "RejectPeer", error, DBUS_TYPE_G_OBJECT_PATH, IN_peer, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_P2PDevice_reject_peer_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_P2PDevice_reject_peer_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_P2PDevice_reject_peer_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_P2PDevice_reject_peer_async (DBusGProxy *proxy, const char* IN_peer, fi_w1_wpa_supplicant1_Interface_P2PDevice_reject_peer_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "RejectPeer", fi_w1_wpa_supplicant1_Interface_P2PDevice_reject_peer_async_callback, stuff, _dbus_glib_async_data_free, DBUS_TYPE_G_OBJECT_PATH, IN_peer, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_P2PDevice_flush (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Flush", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_P2PDevice_flush_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_P2PDevice_flush_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_P2PDevice_flush_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_P2PDevice_flush_async (DBusGProxy *proxy, fi_w1_wpa_supplicant1_Interface_P2PDevice_flush_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Flush", fi_w1_wpa_supplicant1_Interface_P2PDevice_flush_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_P2PDevice_add_service (DBusGProxy *proxy, const GHashTable* IN_args, GError **error)

{
  return dbus_g_proxy_call (proxy, "AddService", error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_P2PDevice_add_service_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_P2PDevice_add_service_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_P2PDevice_add_service_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_P2PDevice_add_service_async (DBusGProxy *proxy, const GHashTable* IN_args, fi_w1_wpa_supplicant1_Interface_P2PDevice_add_service_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "AddService", fi_w1_wpa_supplicant1_Interface_P2PDevice_add_service_async_callback, stuff, _dbus_glib_async_data_free, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_P2PDevice_delete_service (DBusGProxy *proxy, const GHashTable* IN_args, GError **error)

{
  return dbus_g_proxy_call (proxy, "DeleteService", error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_P2PDevice_delete_service_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_P2PDevice_delete_service_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_P2PDevice_delete_service_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_P2PDevice_delete_service_async (DBusGProxy *proxy, const GHashTable* IN_args, fi_w1_wpa_supplicant1_Interface_P2PDevice_delete_service_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "DeleteService", fi_w1_wpa_supplicant1_Interface_P2PDevice_delete_service_async_callback, stuff, _dbus_glib_async_data_free, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_P2PDevice_flush_service (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "FlushService", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_P2PDevice_flush_service_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_P2PDevice_flush_service_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_P2PDevice_flush_service_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_P2PDevice_flush_service_async (DBusGProxy *proxy, fi_w1_wpa_supplicant1_Interface_P2PDevice_flush_service_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "FlushService", fi_w1_wpa_supplicant1_Interface_P2PDevice_flush_service_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_request (DBusGProxy *proxy, const GHashTable* IN_args, guint64* OUT_ref, GError **error)

{
  return dbus_g_proxy_call (proxy, "ServiceDiscoveryRequest", error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID, G_TYPE_UINT64, OUT_ref, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_request_reply) (DBusGProxy *proxy, guint64 OUT_ref, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_request_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  guint64 OUT_ref;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_UINT64, &OUT_ref, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_request_reply)data->cb) (proxy, OUT_ref, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_request_async (DBusGProxy *proxy, const GHashTable* IN_args, fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_request_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "ServiceDiscoveryRequest", fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_request_async_callback, stuff, _dbus_glib_async_data_free, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_response (DBusGProxy *proxy, const GHashTable* IN_args, GError **error)

{
  return dbus_g_proxy_call (proxy, "ServiceDiscoveryResponse", error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_response_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_response_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_response_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_response_async (DBusGProxy *proxy, const GHashTable* IN_args, fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_response_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "ServiceDiscoveryResponse", fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_response_async_callback, stuff, _dbus_glib_async_data_free, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_cancel_request (DBusGProxy *proxy, const guint64 IN_args, GError **error)

{
  return dbus_g_proxy_call (proxy, "ServiceDiscoveryCancelRequest", error, G_TYPE_UINT64, IN_args, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_cancel_request_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_cancel_request_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_cancel_request_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_cancel_request_async (DBusGProxy *proxy, const guint64 IN_args, fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_cancel_request_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "ServiceDiscoveryCancelRequest", fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_cancel_request_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_UINT64, IN_args, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_P2PDevice_service_update (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "ServiceUpdate", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_P2PDevice_service_update_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_P2PDevice_service_update_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_P2PDevice_service_update_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_P2PDevice_service_update_async (DBusGProxy *proxy, fi_w1_wpa_supplicant1_Interface_P2PDevice_service_update_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "ServiceUpdate", fi_w1_wpa_supplicant1_Interface_P2PDevice_service_update_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_external (DBusGProxy *proxy, const gint IN_arg, GError **error)

{
  return dbus_g_proxy_call (proxy, "ServiceDiscoveryExternal", error, G_TYPE_INT, IN_arg, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_external_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_external_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_external_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_external_async (DBusGProxy *proxy, const gint IN_arg, fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_external_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "ServiceDiscoveryExternal", fi_w1_wpa_supplicant1_Interface_P2PDevice_service_discovery_external_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INT, IN_arg, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_P2PDevice_add_persistent_group (DBusGProxy *proxy, const GHashTable* IN_args, char** OUT_path, GError **error)

{
  return dbus_g_proxy_call (proxy, "AddPersistentGroup", error, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID, DBUS_TYPE_G_OBJECT_PATH, OUT_path, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_P2PDevice_add_persistent_group_reply) (DBusGProxy *proxy, char *OUT_path, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_P2PDevice_add_persistent_group_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char* OUT_path;
  dbus_g_proxy_end_call (proxy, call, &error, DBUS_TYPE_G_OBJECT_PATH, &OUT_path, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_P2PDevice_add_persistent_group_reply)data->cb) (proxy, OUT_path, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_P2PDevice_add_persistent_group_async (DBusGProxy *proxy, const GHashTable* IN_args, fi_w1_wpa_supplicant1_Interface_P2PDevice_add_persistent_group_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "AddPersistentGroup", fi_w1_wpa_supplicant1_Interface_P2PDevice_add_persistent_group_async_callback, stuff, _dbus_glib_async_data_free, dbus_g_type_get_map ("GHashTable", G_TYPE_STRING, G_TYPE_VALUE), IN_args, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_P2PDevice_remove_persistent_group (DBusGProxy *proxy, const char* IN_path, GError **error)

{
  return dbus_g_proxy_call (proxy, "RemovePersistentGroup", error, DBUS_TYPE_G_OBJECT_PATH, IN_path, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_P2PDevice_remove_persistent_group_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_P2PDevice_remove_persistent_group_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_P2PDevice_remove_persistent_group_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_P2PDevice_remove_persistent_group_async (DBusGProxy *proxy, const char* IN_path, fi_w1_wpa_supplicant1_Interface_P2PDevice_remove_persistent_group_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "RemovePersistentGroup", fi_w1_wpa_supplicant1_Interface_P2PDevice_remove_persistent_group_async_callback, stuff, _dbus_glib_async_data_free, DBUS_TYPE_G_OBJECT_PATH, IN_path, G_TYPE_INVALID);
}
static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
fi_w1_wpa_supplicant1_Interface_P2PDevice_remove_all_persistent_groups (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "RemoveAllPersistentGroups", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*fi_w1_wpa_supplicant1_Interface_P2PDevice_remove_all_persistent_groups_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
fi_w1_wpa_supplicant1_Interface_P2PDevice_remove_all_persistent_groups_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(fi_w1_wpa_supplicant1_Interface_P2PDevice_remove_all_persistent_groups_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
fi_w1_wpa_supplicant1_Interface_P2PDevice_remove_all_persistent_groups_async (DBusGProxy *proxy, fi_w1_wpa_supplicant1_Interface_P2PDevice_remove_all_persistent_groups_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "RemoveAllPersistentGroups", fi_w1_wpa_supplicant1_Interface_P2PDevice_remove_all_persistent_groups_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_fi_w1_wpa_supplicant1_Interface_P2PDevice */

G_END_DECLS
